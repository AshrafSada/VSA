@page "/products"
@inject IMediator Mediator

<PageTitle>Products</PageTitle>

<div class="container-fluid">
    <h1>Products</h1>
    <p>This is the products page.</p>
    <div class="row">
        <div class="col-12">
            <EditForm EditContext="ProductEditContext"
                      FormName="CreateProductForm"
                      OnValidSubmit="@HandleValidSubmit">
                <Blazored.FluentValidation.FluentValidationValidator />
                <div class="form-group">
                    <label for="name"
                           class="form-label">Product Name</label>
                    <InputText id="name"
                               class="form-control"
                               @bind-Value="CreateProductCommand.Name" />
                    <ValidationMessage For="@(() => CreateProductCommand.Name)" />
                </div>
                <div class="form-group">
                    <label for="price"
                           class="form-label">Product Price</label>
                    <InputNumber id="price"
                                 class="form-control"
                                 @bind-Value="CreateProductCommand.Price" />
                    <ValidationMessage For="@(() => CreateProductCommand.Price)" />
                </div>

                <div class="d-flex align-items-center justify-content-start gap-3 mt-4">
                    <button type="submit"
                            class="btn btn-outline-primary"
                            style="min-width: 9rem;">Save Product</button>
                    <button type="reset"
                            class="btn btn-outline-warning"
                            style="min-width: 9rem;">Reset</button>
                </div>
            </EditForm>
        </div>
    </div>
    <hr class="my-4" />
    <table class="table">
        <thead>
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Product Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("N2")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private IEnumerable<Product> products = new List<Product>();
    public EditContext? ProductEditContext { get; set; }
    [SupplyParameterFromForm]
    public CreateProduct.Command CreateProductCommand { get; set; } = new CreateProduct.Command();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts(1);
        ProductEditContext = new EditContext(CreateProductCommand);
    }

    private async Task LoadProducts(int id = 0)
    {
        var query = new GetProducts.Query(id);
        var result = await Mediator.Send(query);
        products = result;
    }

    private async Task HandleValidSubmit()
    {
        if (ProductEditContext!.Validate() == false)
        {
            return;
        }
        await Mediator.Send(CreateProductCommand);
        CreateProductCommand = new CreateProduct.Command();
        await LoadProducts();
        await InvokeAsync(StateHasChanged);
    }
}
